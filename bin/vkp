#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'vkp'
require 'terminal-table'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/vkp` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/vkp now"
  exit 64
end

include GLI::App

program_desc 'Application for playing vk music'

version Vkp::VERSION

desc 'Show list of audios'
command :list do |c|
  c.default_value "table"
  c.switch [:f, :format] # table view or list view
  
  c.action do |global_options, options, args|   
    audios = @player.list_audios  
    if options[:format] == "table"
      table = Terminal::Table.new do |t|
        t.title = "Music(Page: 1 of ...)"
        t.headings = ['#', 'Title', 'Duration']
        audios.each_with_index do |audio, index|
          t << [ index, "#{audio['title'].strip}", "#{(audio['duration']/60.0).round(2)}" ] unless index == 0         
        end
      end
      puts table
    end
  end
  
end

desc 'Play audio'
command :play do |c|
  c.action do |global_options, options, args|
    @player.download_and_play args[0].to_i
  end
end

desc 'Download audio'
command :download do |c| 
  c.default_value true
  c.switch [:p, :printable]

  c.action do |global_options, options, args|
    @player.download args[0].to_i, options[:printable]
  end
end

desc 'Search audio by string'
command :search do |c|
  c.action do |global_options, options, args|
  end
end

desc 'Show audio info'
command :info do |c|
  c.action do |global_options, options, args|
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  puts "\e[H\e[2J" # clear terminal
  @player = VkontaktePlayer.new
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  puts "\n"
  false
end

exit run(ARGV)
